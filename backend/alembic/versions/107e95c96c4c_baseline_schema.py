"""baseline schema

Revision ID: 107e95c96c4c
Revises:
Create Date: 2025-09-16 14:04:42.279083

"""

from typing import Sequence, Union
import geoalchemy2
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "107e95c96c4c"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # extensions (no-op if already enabled)
    op.execute("CREATE EXTENSION IF NOT EXISTS postgis;")
    op.execute("CREATE EXTENSION IF NOT EXISTS pgcrypto;")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "clients",
        sa.Column("name", sa.String(length=120), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=True),
        sa.Column("phone", sa.String(length=32), nullable=True),
        sa.Column("address", sa.String(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_clients")),
    )
    op.create_table(
        "properties",
        sa.Column("address_line1", sa.String(), nullable=False),
        sa.Column("address_line2", sa.String(), nullable=True),
        sa.Column("city", sa.String(), nullable=False),
        sa.Column("state", sa.String(), nullable=False),
        sa.Column("zip", sa.String(), nullable=False),
        sa.Column("bedrooms", sa.Integer(), nullable=True),
        sa.Column("bathrooms", sa.Float(), nullable=True),
        sa.Column("year_built", sa.Integer(), nullable=True),
        sa.Column(
            "house_geometry",
            geoalchemy2.types.Geometry(
                geometry_type="POLYGON",
                srid=2230,
                dimension=2,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column(
            "lot_geometry",
            geoalchemy2.types.Geometry(
                geometry_type="POLYGON",
                srid=2230,
                dimension=2,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_properties")),
    )
    op.create_index(
        "unique_property_with_address2",
        "properties",
        ["address_line1", "address_line2", "city", "state", "zip"],
        unique=True,
        postgresql_where="address_line2 IS NOT NULL",
    )
    op.create_index(
        "unique_property_without_address2",
        "properties",
        ["address_line1", "city", "state", "zip"],
        unique=True,
        postgresql_where="address_line2 IS NULL",
    )
    op.create_table(
        "client_notification_preferences",
        sa.Column("client_id", sa.UUID(), nullable=False),
        sa.Column(
            "channel",
            sa.Enum(
                "EMAIL",
                "SMS",
                "MESSENGER",
                name="notification_channel",
            ),
            nullable=False,
        ),
        sa.Column(
            "enabled", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["client_id"],
            ["clients.id"],
            name=op.f("fk_client_notification_preferences_client_id_clients"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_client_notification_preferences")),
        sa.UniqueConstraint(
            "client_id",
            "channel",
            name=op.f("uq_client_notification_preferences_client_id"),
        ),
    )
    op.create_table(
        "listings",
        sa.Column("property_id", sa.UUID(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "ACTIVE",
                "COMING_SOON",
                "PENDING",
                "SOLD",
                "CANCELED",
                name="listing_status",
            ),
            nullable=False,
        ),
        sa.Column("listing_price", sa.Numeric(), nullable=True),
        sa.Column(
            "listing_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "last_seen_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "is_active", sa.Boolean(), server_default=sa.text("true"), nullable=False
        ),
        sa.Column("source", sa.String(), nullable=False),
        sa.Column("external_id", sa.String(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["property_id"],
            ["properties.id"],
            name=op.f("fk_listings_property_id_properties"),
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_listings")),
    )
    op.create_index(
        op.f("ix_listings_source"),
        "listings",
        ["source", "external_id"],
        unique=True,
        postgresql_where=sa.text("external_id IS NOT NULL"),
    )
    op.create_table(
        "property_analysis",
        sa.Column("property_id", sa.UUID(), nullable=False),
        sa.Column("sb9_possible", sa.Boolean(), nullable=True),
        sa.Column("adu_possible", sa.Boolean(), nullable=True),
        sa.Column("band_low", sa.Integer(), nullable=True),
        sa.Column("band_high", sa.Integer(), nullable=True),
        sa.Column("split_angle_degree", sa.Numeric(), nullable=True),
        sa.Column(
            "split_line_geometry",
            geoalchemy2.types.Geometry(
                geometry_type="LINESTRING",
                srid=2230,
                dimension=2,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("image_url", sa.String(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["property_id"],
            ["properties.id"],
            name=op.f("fk_property_analysis_property_id_properties"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_property_analysis")),
        sa.UniqueConstraint(
            "property_id", name=op.f("uq_property_analysis_property_id")
        ),
    )
    op.create_table(
        "saved_searches",
        sa.Column("client_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=120), nullable=False),
        sa.Column("beds_min", sa.Integer(), nullable=False),
        sa.Column("baths_min", sa.Integer(), nullable=False),
        sa.Column("max_price", sa.Integer(), nullable=True),
        sa.Column("analysis_note", sa.String(), nullable=True),
        sa.Column(
            "is_active", sa.Boolean(), server_default=sa.text("true"), nullable=False
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["client_id"],
            ["clients.id"],
            name=op.f("fk_saved_searches_client_id_clients"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_saved_searches")),
    )
    op.create_table(
        "sent_notifications",
        sa.Column("client_id", sa.UUID(), nullable=False),
        sa.Column("listing_id", sa.UUID(), nullable=False),
        sa.Column("saved_search_id", sa.UUID(), nullable=False),
        sa.Column(
            "channel",
            sa.Enum(
                "EMAIL",
                "SMS",
                "MESSENGER",
                name="notification_channel",
            ),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum("SENT", "FAILED", name="notification_status"),
            nullable=False,
        ),
        sa.Column("sent_to", sa.String(), nullable=False),
        sa.Column("body", sa.String(), nullable=False),
        sa.Column("error", sa.String(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["client_id"],
            ["clients.id"],
            name=op.f("fk_sent_notifications_client_id_clients"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["listing_id"],
            ["listings.id"],
            name=op.f("fk_sent_notifications_listing_id_listings"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["saved_search_id"],
            ["saved_searches.id"],
            name=op.f("fk_sent_notifications_saved_search_id_saved_searches"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_sent_notifications")),
    )
    op.create_table(
        "saved_search_fields",
        sa.Column("saved_search_id", sa.UUID(), nullable=False),
        sa.Column("search_field", sa.String(), nullable=False),
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["saved_search_id"],
            ["saved_searches.id"],
            name=op.f("fk_saved_search_fields_saved_search_id_saved_searches"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_saved_search_fields")),
        sa.UniqueConstraint(
            "saved_search_id",
            "search_field",
            "value",
            name=op.f("uq_saved_search_fields_saved_search_id"),
        ),
    )
    op.create_index(
        op.f("ix_saved_search_fields_search_field"),
        "saved_search_fields",
        ["search_field", "value"],
        unique=False,
    )
    op.create_table(
        "saved_search_matches",
        sa.Column("saved_search_id", sa.UUID(), nullable=False),
        sa.Column("listing_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["listing_id"],
            ["listings.id"],
            name=op.f("fk_saved_search_matches_listing_id_listings"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["saved_search_id"],
            ["saved_searches.id"],
            name=op.f("fk_saved_search_matches_saved_search_id_saved_searches"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_saved_search_matches")),
        sa.UniqueConstraint(
            "saved_search_id",
            "listing_id",
            name=op.f("uq_saved_search_matches_saved_search_id"),
        ),
    )
    op.create_table(
        "search_listing_analysis",
        sa.Column("saved_search_id", sa.UUID(), nullable=False),
        sa.Column("listing_id", sa.UUID(), nullable=False),
        sa.Column("property_analysis_id", sa.UUID(), nullable=True),
        sa.Column(
            "criteria_snapshot",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            nullable=False,
        ),
        sa.Column(
            "listing_snapshot",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            nullable=False,
        ),
        sa.Column("llm_analysis", sa.Text(), nullable=False),
        sa.Column("llm_summary", sa.Text(), nullable=True),
        sa.Column("verdict", sa.Text(), nullable=False),
        sa.Column("notified_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["listing_id"],
            ["listings.id"],
            name=op.f("fk_search_listing_analysis_listing_id_listings"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["property_analysis_id"],
            ["property_analysis.id"],
            name=op.f(
                "fk_search_listing_analysis_property_analysis_id_property_analysis"
            ),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["saved_search_id"],
            ["saved_searches.id"],
            name=op.f("fk_search_listing_analysis_saved_search_id_saved_searches"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_search_listing_analysis")),
        sa.UniqueConstraint(
            "saved_search_id", "listing_id", name="unique_search_listing_analysis"
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    op.drop_table("search_listing_analysis")
    op.drop_table("saved_search_matches")
    op.drop_index(
        op.f("ix_saved_search_fields_search_field"), table_name="saved_search_fields"
    )
    op.drop_table("saved_search_fields")
    op.drop_table("sent_notifications")
    op.drop_table("saved_searches")
    op.drop_table("property_analysis")
    op.drop_index(
        op.f("ix_listings_source"),
        table_name="listings",
    )
    op.drop_table("listings")
    op.drop_table("client_notification_preferences")
    op.drop_index(
        "unique_property_without_address2",
        table_name="properties",
    )
    op.drop_index(
        "unique_property_with_address2",
        table_name="properties",
    )
    op.drop_table("properties")
    op.drop_table("clients")
    # ### end Alembic commands ###
